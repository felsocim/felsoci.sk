#+TITLE: Creating website and blogging in Org mode
#+AUTHOR: Marek Felšöci

#+BEGIN_SYNOPSIS
I discovered the power of Org mode when I started to work on my Ph.D. thesis
which is being entirely written in Org mode too. Indeed, one can easily export
an Org mode document to an HTML page or a PDF document typeset in LaTeX.
Recently, I committed myself to overhaul my personal website and decided to
produce it using Org. So, in this post, I detail the whole process step by step.
#+END_SYNOPSIS

* Project's structure
:PROPERTIES:
:CUSTOM_ID: projects-structure
:END:

The idea here is to build a static HTML website generated from a collection of
Org [cite:@OrgMode] documents. On one hand, the site have a couple of content
pages such as /Home/, /About/ and so on. On the other hand, it features a small
blog as well.

When it comes to the style of the site, I am looking for simplicity. Although,
there are some great Org HTML templates [cite:@OrgTemplates], they are adapted
rather for standalone pages than for a complete website with navigation. So, I
prefer to define my own tiny CSS style sheet.

The file structure of the project is described below.

#+BEGIN_EXAMPLE
.
├── blog
│   ├── creating-website-and-blogging-in-org-mode.org
│   ├── attachments
│   ├── biblio-setup.org (symbolic link to '../shared/biblio-setup.org')
│   └── ...
├── cv
│   └── cv-felsoci.tex
├── images
│   ├── marek.jpg
│   └── ...
├── public
│   └── favicon.ico
├── styles
│   ├── custom.css
│   └── htmlize.css
├── shared
│   ├── biblio-setup.org
│   ├── footer.html
│   └── header.html
├── about.org
├── channels.scm
├── index.org
├── manifest.scm
├── publish.el
├── README.md
├── research.org
└── teaching.org
#+END_EXAMPLE

~blog~ folder holds the Org documents of the blog posts. The ~attachments~
subfolder contains static attachments related to the blog posts. ~cv~ contains
my complete resume in a single LaTeX document published in PDF format and
available for download from the home page. ~images~ naturally contains all the
image files featured on the site. ~public~ can be used to store the exported
website (see more in [[#general-configuration][General configuration]]). The
custom CSS sheets reside in ~styles~ where ~htmlize.css~ stylizes syntax
highlighting in source code blocks and ~custom.css~ defines the look and feel of
all the other elements of the website.  ~shared~ holds the common static header
and footer files as well as an Org setup file providing some common document
configuration, e.g. for bibliography. The Org documents corresponding to the
content pages are stored in the root of the project's folder. Finally, the Emacs
Lisp script ~publish.el~ controls the publishing of the website.

** Software environment
:PROPERTIES:
:CUSTOM_ID: software-environment
:END:

I use the GNU Guix [cite:@Guix] transactional package manager allowing for a
self-contained, executable description of the whole software environment
required for running the publishing Emacs Lisp script. The packages to include
into the environment are listed in a manifest file [cite:@GuixManifests], here
~manifest.scm~.

#+HEADER: :tangle ../manifest.scm
#+BEGIN_SRC scheme
(specifications->manifest
 (list "emacs"
       "emacs-org"
       "emacs-org-ref"
       "emacs-citeproc-el"
       "emacs-htmlize"
       "git"
       "python"
       "python-pygments"
       "texlive"
       "biber"
       "bash"
       "coreutils"
       "tar"))
#+END_SRC

To ensure the same version of Guix and every single package in the environment
every time I enter the latter, I use also a channel file [cite:@GuixChannels],
here ~channel.scm~, which represents a list of the Git repositories providing
package definitions, i.e. channels in Guix terminology, necessary to build the
publishing environment together with the associated revision numbers.

#+HEADER: :tangle ../channels.scm
#+BEGIN_SRC scheme
(list
 (channel
  (name 'guix)
  (url "https://git.savannah.gnu.org/git/guix.git")
  (branch "master")
  (commit
   "ca8c7a36dfbefd66841a2a6df4c9e44ba525c3e0")
  (introduction
   (make-channel-introduction
    "9edb3f66fd807b096b48283debdcddccfea34bad"
    (openpgp-fingerprint
     "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

Note that I use Guix also at work to improve the reproducibility of my numerical
experiments. If you want to know more about this amazingly powerful tool, refer
to the citations in this section.

** Header and footer
:PROPERTIES:
:CUSTOM_ID: header-and-footer
:END:

All the pages of the site have the same header and footer. The latter are stored
directly in HTML format and reside in the ~shared~ folder.

The header contains the site name and the navigation. The footer contains the
legal information, the bottom navigation menu and a short information section.

** Setup file
:PROPERTIES:
:CUSTOM_ID: setup-file
:header-args: :tangle ../shared/biblio-setup.org
:END:

I put global bibliography configuration into a dedicated Org file stored in the
~shared~ folder. This file can then be included in Org documents featuring
citations and a bibliography listing.

~biblio-setup.org~ is quiet short. I only need to provide the path to
the file containing bibliography entries

#+BEGIN_SRC org
#+BIBLIOGRAPHY: references.bib
#+END_SRC

and specify the export processor to use, i.e. =csl= [cite:@Csl] in this case.
The second argument of =#+CITE_EXPORT= is the style file [cite:@CslStyles] to
use when formatting citations and bibliography listings on export.
Unfortunately, the absolute path must be given here.

#+BEGIN_SRC org
#+CITE_EXPORT: csl ~/src/felsoci.sk/styles/ieee-with-url.csl
#+END_SRC

Finally, to include a bibliography listing in an Org document I use the
=#+PRINT_BIBLIOGRAPHY:= directive within an associated *References* section.

#+BEGIN_EXAMPLE
,* References
:PROPERTIES:
:CUSTOM_ID: references
:END:

#+INCLUDE: ../shared/biblio-setup.org
#+PRINT_BIBLIOGRAPHY:
#+END_EXAMPLE

* Publishing script
:PROPERTIES:
:CUSTOM_ID: publishing-script
:header-args: :tangle ../publish.el :padline no
:END:

The core of the project is the Elisp publishing script ~publish.el~ responsible
for generating the final HTML source of the site.

It begins by importing the Emacs packages providing:

- Org mode support,
  #+BEGIN_SRC elisp
(require 'org)
  #+END_SRC
- HTML export backend,
  #+BEGIN_SRC elisp
(require 'ox-html)
  #+END_SRC
- publishing functions,
  #+BEGIN_SRC elisp
(require 'ox-publish)
  #+END_SRC
- engine for exporting source code blocks to HTML,
  #+BEGIN_SRC elisp
(require 'htmlize)
  #+END_SRC
- bibliography support.
  #+BEGIN_SRC elisp
(require 'oc)
(require 'oc-biblatex) ;; for LaTeX/PDF
(require 'citeproc) ;; for HTML
(require 'oc-csl) ;; for HTML
  #+END_SRC

To export my resume from LaTeX to PDF, I will need a custom publishing function
because I am not exporting an Org but a TeX document.

#+BEGIN_SRC elisp
(defun latex-publish-to-pdf (plist filename pub-dir)
  (let
      ;; Keep the initial directory.
      ((cwd default-directory))
    ;; Navigate to the directory of the LaTeX file to publish.
    (cd (file-name-directory filename))
    ;; Call the interal publishing function.
    (org-latex-compile filename)
    ;; Publish the PDF file to the destination set in the project's alist.
    (org-publish-attachment
     plist
     (concat (file-name-sans-extension filename) ".pdf")
     pub-dir)
    ;; Return to the initial directory.
    (cd cwd)))
#+END_SRC

Then, I define a utility function =file-dates= allowing me to get the dates of
the first publication and of the last modification of an Org document.

At first, the function tries to find the dates in the Git log.

#+BEGIN_SRC elisp
(defun file-dates (file)
  (let*
      ((first-commit-date
        (shell-command-to-string
         (concat
          "git log --reverse --pretty=\"format:%cD\""
          " "
          file
          " 2> /dev/null | head -n 1")))
       (last-commit-date
        (shell-command-to-string
         (concat
          "git log --pretty=\"format:%cD\""
          " "
          file
          " 2> /dev/null | head -n 1")))
       (last-modification-date-raw
        (file-attribute-modification-time
         (file-attributes file)))
       (last-modification-date
        (format-time-string
         "%d/%m/%Y"
         (+
          (*
           (nth 0 last-modification-date-raw) (expt 2 16))
          (nth 1 last-modification-date-raw)))))
#+END_SRC

If there is no commit involving the file, I take the last modification timestamp
recorded by the filesystem.

#+BEGIN_SRC elisp
    (list
     (if (string= first-commit-date "")
         last-modification-date
       (substring
        (shell-command-to-string
         (concat
          "date -d \""
          first-commit-date
          "\" +%d/%m/%Y")) 0 -1))
     (if (string= last-commit-date "")
         last-modification-date
       (substring
        (shell-command-to-string
         (concat
          "date -d \""
          last-commit-date
          "\" +%d/%m/%Y")) 0 -1)))))
#+END_SRC

** Blog post synopsis
:PROPERTIES:
:CUSTOM_ID: blog-post-synopsis
:END:

Each blog post may contain a synopsis used to introduce the content of the post
in the list of blog posts:

#+CAPTION: Excerpt of the list of blog posts.
#+ATTR_HTML: :width 50%
#+NAME: figure:blog-item
[[../images/post-item.png]]

In the source Org document, the synopsis text must be enclosed between the
=#+BEGIN_SYNOPSIS= and =#+END_SYNOPSIS= tags.

For extracting the synopsis, I define the function =get-post-synopsis= taking as
argument a =blog-post=.

#+BEGIN_SRC elisp
(defun get-post-synopsis (blog-post)
#+END_SRC

The first thing to do is to load the Org file pointed by =blog-post=

#+BEGIN_SRC elisp
  (with-temp-buffer
    (insert-file-contents blog-post)
#+END_SRC

and move the cursor to the beginning of the document.

#+BEGIN_SRC elisp
    (goto-char (point-min))
#+END_SRC

In the core of the function, I use the markers =beg= and =end= to select the
area in the buffer between the first and the last character of the synopsis. To
exclude the newlines after the opening and before the closing tag, I move
forward the starting marker by one and move backwards the ending marker by one
too.

#+BEGIN_SRC elisp
    (let
        ((beg (+ 1 (re-search-forward "^#\\+BEGIN_SYNOPSIS$")))
         (end (- (progn
                   (re-search-forward "^#\\+END_SYNOPSIS$")
                   (match-beginning 0)) 1)))
#+END_SRC

At the end, the function returns the sub-string of the buffer corresponding to
the area between the two markers. At the same time, I need to remove any
citations from the sub-string in order to prevent the apparition of artifacts on
export.

#+BEGIN_SRC elisp
      (replace-regexp-in-string "[ ]\\[cite.*\\]" ""
                                (buffer-substring beg end)))))
#+END_SRC

** List of blog posts
:PROPERTIES:
:CUSTOM_ID: list-of-blog-posts
:END:

For a handy access to blog posts, the site features a page containing the list
of all blog posts with a [[#blog-post-synopsis][short synopsis]], the date of
publishing, the author's name and the link to the post in form of a button (see
Figure [[figure:blog-item]]).

To create this page, we use the sitemap functionality in Org mode. The default
appearance of the sitemap is rather basic. To customize it so the list of blog
posts suits the design of the site, we need to define our own functions for
formatting the sitemap (list of blog posts) and its items (blog posts).

*** Formatting items
:PROPERTIES:
:CUSTOM_ID: formatting-items
:END:

The function =format-blog-item= changes the formatting of the sitemap item (blog
post) =entry= belonging to =project= (see
[[#project-components][Project components]]). Note that, =entry= is the absolute
path to the Org file of the blog post being processed. Also, I don't use the
sitemap =style= argument here.

#+BEGIN_SRC elisp
(defun format-blog-item (entry style project)
  (let
#+END_SRC

Unfortunately, when the function is called by the Emacs export machinery, the
absolute path provided in =entry= is incorrect. It lacks the parent folder
~blog~ because Emacs thinks it is running in the project's root although the
current working folder, when exporting blog posts, is ~blog~ (see
[[#blog][Blog]]). Therefore, I have to re-include ~blog/~ into the path.

For example, if the initial =entry= holds ~/home/marek/src/felsoci.sk/post.org~,
I need to transform it to ~/home/marek/src/felsoci.sk/blog/post.org~.

#+BEGIN_SRC elisp
      ((fixed-entry
        (concat
         (file-name-directory entry) "blog/" (file-name-nondirectory entry)))
#+END_SRC

Also, before actually formatting the sitemap entry, I need to determine its
first publication and last modification dates.

#+BEGIN_SRC elisp
       (entry-dates
        (file-dates
         (concat
          (plist-get (cdr project) :base-directory)
          "/"
          entry))))
#+END_SRC

Finally, return the Org string corresponding to the sitemap entry formatted
using the =format= function similar to =sprintf= in C.

#+BEGIN_SRC elisp
    (format "
@@html:<h2 class=\"post-title\">@@
[[file:%s][%s]]
@@html:</h2><span class=\"post-metadata\">@@
Published on %s by %s%s
@@html:</span>@@

%s

@@html:<a href=\"@@%s@@html:.html\"><button>Read more</button></a>@@
"
#+END_SRC

All of the =%s= are replaced by the values of the arguments following the string
to format:

1. the path to the blog post Org document,
   #+BEGIN_SRC elisp
            entry
   #+END_SRC
2. the title of the post found in the Org document under the =#+TITLE=
   directive,
   #+BEGIN_SRC elisp
            (org-publish-find-title entry project)
   #+END_SRC
3. the formatted date of publishing,
   #+BEGIN_SRC elisp
            (nth 0 entry-dates)
   #+END_SRC
4. the author's name extracted from the project property list =project=,
   #+BEGIN_SRC elisp
            (substring
             (format "%s"
                     (org-publish-find-property entry :author project)) 1 -1)
   #+END_SRC
5. the formatted date of last modification, if any,
   #+BEGIN_SRC elisp
            (if (string= (nth 0 entry-dates) (nth 1 entry-dates))
                ""
              (concat " (updated on " (nth 1 entry-dates) ")"))
   #+END_SRC
6. the synopsis of the blog post retrieved using our custom parsing function,
   =get-post-synopsis=
   #+BEGIN_SRC elisp
            (get-post-synopsis fixed-entry)
   #+END_SRC
7. the path to the blog post file without extension because the link is not
   converted into a HTML link during the export as we do not use a standard
   Org-formatted link such as =[[target][text]]= but a button.
   #+BEGIN_SRC elisp
            (file-name-sans-extension entry))))
   #+END_SRC

*** Formatting the list
:PROPERTIES:
:CUSTOM_ID: formatting-the-list
:END:

The function =format-blog-sitemap= replaces the default function for generating
sitemap which represents the list of blog posts in our case. It outputs an Org
document having the title =title=. The blog posts formatted by the function
=format-blog-item= are available as a list through the =posts= argument.

Actually, the function represents a concatenation of the =title=

#+BEGIN_SRC elisp
(defun format-blog-sitemap (title posts)
  (concat
   "#+TITLE: " title "\n\n"
#+END_SRC

and the items of =posts= separated by a newline character and a horizontal line
in the resulting Org document (see Figure [[figure:blog-item]]).

Note that, =posts= is a nested list having the form:

- ‘unordered’
- ‘list of possibly nested posts’
- ‘list of possibly nested posts’
- ...

Therefore, I have to transform it into a simple list containing only the
leading elements of the nested post lists. To achieve this, I apply a sequence
filter on =posts=. Then, I strip the ‘unordered’ string from the beginning using
=cdr= and I apply =car= as a filter on the lists of possibly nested posts which
makes =seq-filter= return only the leading elements of the latter.

#+BEGIN_SRC elisp
   (mapconcat
    (lambda (post)
      (format "%s\n" (car post)))
    (seq-filter #'car (cdr posts))
    "\n")))
#+END_SRC

** Page titles
:PROPERTIES:
:CUSTOM_ID: page-titles
:END:

By default, the title of an output HTML page corresponds to the title of the
original Org document. In addition to this title, I want to add a suffix, e.g.
‘Title - My site’.

To achieve this, I define the function =add-suffix-to-html-title= taking as
argument the =suffix= to append and the list of =html-files= to process.

#+BEGIN_SRC elisp
(defun add-suffix-to-html-title (suffix html-files)
#+END_SRC

For each HTML file in =html-files=, the function reads the content of the file,

#+BEGIN_SRC elisp
  (while (setq html-file (pop html-files))
    (with-temp-buffer
      (insert-file-contents html-file)
#+END_SRC

navigates the cursor to the end of the buffer and backward searches for the
closing =</title>= HTML tag.

#+BEGIN_SRC elisp
      (goto-char (point-max))
      (re-search-backward "<\\/title>")
#+END_SRC

The cursor being at the beginning of the match, it inserts the text in =suffix=
to the buffer immediately after the last character of the original document's
title and saves the modified buffer.

#+BEGIN_SRC elisp
      (insert suffix)
      (write-region 1 (point-max) html-file))))
#+END_SRC

Then, I define two wrappers for this function because I want to add a different
suffix depending on whether the page is a content page or a blog post.

The wrapper =add-suffix-to-html-title-for-pages= calls the original function
=add-suffix-to-html-title= after publishing content pages and adds the suffix
‘ - Marek Felšöci’. Note that, the list of corresponding HTML files is acquired
through the project component property =:publishing-directory= read from the
=plist= argument (see [[#project-components][Project components]]).

#+BEGIN_SRC elisp
(defun add-suffix-to-html-title-for-pages (plist)
  (add-suffix-to-html-title
   " - Marek Felšöci"
   (directory-files
    (plist-get plist :publishing-directory) t "\\.html$")))
#+END_SRC

The wrapper =add-suffix-to-html-title-for-blog-posts= calls the original
function =add-suffix-to-html-title= when exporting blog posts and adds the
suffix ‘ - Marek's blog’ to the titles of blog posts.

#+BEGIN_SRC elisp
(defun add-suffix-to-html-title-for-blog-posts (plist)
  (add-suffix-to-html-title
   " - Marek's blog"
   (directory-files
    (plist-get plist :publishing-directory) t "\\.html$")))
#+END_SRC

These functions are called completion functions as they are triggered after
publishing [cite:@OrgSrcDest].

** Last modification date
:PROPERTIES:
:CUSTOM_ID: last-modification-date
:END:

To include the last modification date to every page and blog post, I use an
another completion function.

It begins by acquiring the list of original Org files through the project
component property =:base-directory= read from the =plist= argument (see
[[#project-components][Project components]]).

#+BEGIN_SRC elisp
(defun add-last-modification-date (plist)
  (let*
      ((org-files
        (directory-files
         (plist-get plist :base-directory) t "\\.org$"))
#+END_SRC

I also need to get the path to the publishing directory through the component
property =:publishing-directory=.

#+BEGIN_SRC elisp
       (output-directory
        (plist-get plist :publishing-directory)))
#+END_SRC

The idea is to determine the last modification dates of the original Org
documents using the function =last-modified= from
[[#publishing-script][Publishing script]] and insert the dates to the published
HTML documents straight before the footer (see
[[#general-configuration][General configuration]]).

To do this, I loop over each of the original Org documents to:

- determine its last modification date,
  #+BEGIN_SRC elisp
    (while (setq org-file (pop org-files))
      (setq last-modification-date
            (nth 1 (file-dates org-file)))
  #+END_SRC

- get the path to the corresponding output HTML document,
  #+BEGIN_SRC elisp
      (setq output-html-file
            (concat
             output-directory "/" (file-name-base org-file) ".html"))
  #+END_SRC

- open the HTML document, place the cursor before the opening =<div>= tag of the
  footer, insert the last modification date and save the modification.
  #+BEGIN_SRC elisp
      (with-temp-buffer
        (insert-file-contents output-html-file)
        (goto-char (point-max))
        (re-search-backward "<div id=\"postamble\"")
        (insert
         "<div class=\"content\"><p id=\"last-modification\">"
         "Last update on "
         last-modification-date
         "</p></div>")
        (write-region 1 (point-max) output-html-file)))))
#+END_SRC

** General configuration
:PROPERTIES:
:CUSTOM_ID: general-configuration
:END:

Before configuring the publishing of the site, I set a couple of general
preferences.

I deactivate the using of Org timestamp flags to force publishing of all files
and not only changed files. It makes sure everything gets published.

#+BEGIN_SRC elisp
(setq org-publish-use-timestamps-flag nil)
#+END_SRC

I also disable the prompt before each code block evaluation.

#+BEGIN_SRC elisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Then, I want to preserve the indentation in code blocks on export and tangle.

#+BEGIN_SRC elisp
(setq org-src-preserve-indentation t)
#+END_SRC

In order to ensure the bibliography entries, if any, are published correctly I
override the default LaTeX publishing command to use =latexmk=.

#+BEGIN_SRC elisp
(setq org-latex-pdf-process (list "latexmk --shell-escape -f -pdf %f"))
#+END_SRC

Moreover, I need to instrument the publishing function to include the header and
the footer to every exported page.

#+BEGIN_SRC elisp
(setq org-html-preamble (org-file-contents "./shared/header.html"))
(setq org-html-postamble (org-file-contents "./shared/footer.html"))
#+END_SRC

In order to include my custom CSS styles and configure the favicon, I add three
extra lines to the HTML header.

#+BEGIN_SRC elisp
(setq org-html-head-extra "<link rel=\"stylesheet\" type=\"text/css\"
href=\"../styles/custom.css\">
<link rel=\"stylesheet\" type=\"text/css\"
href=\"../styles/htmlize.css\">
<link rel=\"icon\" type=\"image/x-icon\"
href=\"https://felsoci.sk/favicon.ico\"/>")
#+END_SRC

For the HTML export backend to stylize code blocks using a CSS style sheet file
instead of inline CSS rules, I have to parameter the
=org-html-htmlize-output-type= variable.

#+BEGIN_SRC elisp
(setq org-html-htmlize-output-type 'css)
#+END_SRC

Finally, I define a utility function allowing me to change the output folder
through an environment variable, namely =ORG_OUTPUT_PATH=. This way, I can
switch between my local Apache server for testing and the production server
easily. If the variable is not set in the current environment, the output will
be published into the ~public~ folder located in the root of the project.

Note that, the optional =suffix= argument specifies the local path starting from
the root of the output folder.

#+BEGIN_SRC elisp
(defun get-output-path (&optional suffix)
  (let
      ((custom (getenv "ORG_OUTPUT_PATH")))
    (if custom
        (concat custom "/" suffix)
      (concat "./public/" suffix))))
#+END_SRC

** Project components
:PROPERTIES:
:CUSTOM_ID: project-components
:END:

The last thing to do is to define the =org-publish-project-alist=. It represents
the list of project's components and their individual export configuration as a
list of properties, e. g. =:publishing-directory=.

#+BEGIN_SRC elisp
(setq org-publish-project-alist
      (list
#+END_SRC

I split the site project into 5 components.

*** Blog
:PROPERTIES:
:CUSTOM_ID: blog
:END:

All of the configuration properties are pretty self-explanatory.

#+BEGIN_SRC elisp
       (list "blog"
             :base-directory "./blog"
             :base-extension "org"
             :publishing-directory (get-output-path "blog")
             :htmllized-source t
             :with-author t
             :with-creator t
             :with-date t
             :headline-level 4
             :section-numbers nil
             :with-toc nil
             :html-head nil
             :html-head-include-default-style nil
             :html-head-include-scripts nil
#+END_SRC

Although, I highlight the publishing function I choose. It tells Emacs to
publish the Org documents composing this project component in the HTML format.

#+BEGIN_SRC elisp
             :publishing-function '(org-html-publish-to-html)
#+END_SRC

The =:completion-function= property allows me to define functions to execute
after publishing. Here, I set =add-last-modification-date= and
=add-suffix-to-html-title-for-blog-posts= as completion functions (see
[[#last-modification-date][Last modification date]] and
[[#page-titles][Page titles]]).

#+BEGIN_SRC elisp
             :completion-function '(add-last-modification-date
                                    add-suffix-to-html-title-for-blog-posts)
#+END_SRC

Eventually, I configure the sitemap corresponding to the list of blog posts.
The title is ‘Posts’ and the posts are sorted from the latest to the oldest
one.

#+BEGIN_SRC elisp
             :auto-sitemap t
             :sitemap-filename "posts.org"
             :sitemap-title "Posts"
             :sitemap-sort-files 'anti-chronologically
#+END_SRC

Moreover, I use the functions =format-blog-sitemap= and =format-blog-item= to
format the entires of the site map (blog post items) as well as the sitemap
(list of blog posts) itself (see [[#list-of-blog-posts][List of blog posts]]).

#+BEGIN_SRC elisp
             :sitemap-function 'format-blog-sitemap
             :sitemap-format-entry 'format-blog-item)
#+END_SRC

*** Content pages
:PROPERTIES:
:CUSTOM_ID: content-pages
:END:

The export configuration for the content pages such as /Home/ and /About/ is
very close to the previous one

#+BEGIN_SRC elisp
        (list "pages"
              :base-directory "."
              :base-extension "org"
              :publishing-directory (get-output-path)
              :publishing-function '(org-html-publish-to-html)
              :htmllized-source t
              :with-author t
              :with-creator t
              :with-date t
              :headline-level 4
              :section-numbers nil
              :with-toc nil
              :html-head nil
              :html-head-include-default-style nil
              :html-head-include-scripts nil
#+END_SRC

except for the title suffix function =add-suffix-to-html-title-for-pages= (see
[[#page-titles][Page titles]]).

#+BEGIN_SRC elisp
              :completion-function '(add-last-modification-date
                                     add-suffix-to-html-title-for-pages)
#+END_SRC

Furthermore, I must exclude the ~blog~ folder from the list of input documents
to prevent duplicate export.

#+BEGIN_SRC elisp
              :exclude (regexp-opt '("blog")))
#+END_SRC

*** CV
:PROPERTIES:
:CUSTOM_ID: cv
:END:

The most important thing in the export configuration for the CV is the
publishing function. Here, I use my custom publishing function defined at the
beginning of [[#publishing-script][Publishing script]].

#+BEGIN_SRC elisp
        (list "cv"
              :base-directory "./cv"
              :base-extension "tex"
              :publishing-directory (get-output-path "cv")
              :publishing-function '(latex-publish-to-pdf))
#+END_SRC

*** Styles, images and other attachments
:PROPERTIES:
:CUSTOM_ID: styles-images-and-other-attachments
:END:

In case of static files such as CSS styles, images and other attachments which
are published as is, I use the publishing function for attachments. In case of
the ~styles~ folder, I enable recursive lookup in order to include also the
~fonts~ sub-folder. Same for ~attachments~ (see
[[#projects-structure][Project's structure]]).

#+BEGIN_SRC elisp
        (list "styles"
              :base-directory "./styles"
              :base-extension ".*"
              :recursive t
              :publishing-directory (get-output-path "styles")
              :publishing-function '(org-publish-attachment))
        (list "images"
              :base-directory "./images"
              :base-extension ".*"
              :publishing-directory (get-output-path "images")
              :publishing-function '(org-publish-attachment))
        (list "attachments"
              :base-directory "./blog/attachments"
              :base-extension ".*"
              :recursive t
              :publishing-directory (get-output-path "blog/attachments")
              :publishing-function '(org-publish-attachment))
#+END_SRC

I complete the list by adding the list of all the components of the project as
well as the name of the latter.

#+BEGIN_SRC elisp
        (list "felsoci.sk"
              :components '("blog" "pages" "styles" "images" "attachments"))))
#+END_SRC

* Ready, steady, go!
:PROPERTIES:
:CUSTOM_ID: ready-steady-go
:END:

At this point, I am ready to go. To launch the publishing I need to:

1. extract the source code from the Org document corresponding to this page,
   #+BEGIN_SRC shell
guix time-machine -C channels.scm -- shell --pure -m manifest.scm -- \
     emacs --batch -l org --eval \
'(org-babel-tangle-file "blog/creating-websites-and-blogging-in-org-mode.org")'
   #+END_SRC

2. call the publishing function on the ~publish.el~ file.
   #+BEGIN_SRC shell
guix time-machine -C channels.scm -- shell --pure -m manifest.scm -- \
     emacs --batch --no-init-file \
     --eval '(setq org-confirm-babel-evaluate nil)' --load publish.el \
     --funcall org-publish-all
   #+END_SRC

Feel free to send me your feedback!

* Acknowledgement
:PROPERTIES:
:CUSTOM_ID: acknowledgement
:END:

Many thanks to Dennis Ogbe who published a similar post on
[[https://ogbe.net/blog/blogging_with_org.html][his website]]. It helped me a
lot while building my own publishing configuration!

* References
:PROPERTIES:
:CUSTOM_ID: references
:END:

#+INCLUDE: ../shared/biblio-setup.org
#+PRINT_BIBLIOGRAPHY:
