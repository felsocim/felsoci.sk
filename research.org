#+TITLE: Research
#+AUTHOR: Marek Felšöci

At present, I'm carrying out my research activities as part of my second
post-doctoral fellowship within the [[https://www-pequan.lip6.fr/][PEQUAN]] team
of ([[https://www.lip6.fr/?LANG=en][LiP6]],
[[https://www.sorbonne-universite.fr/en][Sorbonne Université]]), where I am
working on the transition to mixed precision computation within a numerical
processing block of a distributed acousting sensing device (see
[[#research-post-doc-2][Mixed precision computation in a distributed acousting
sensing block]]). The subject of my first post-doctorate with the
[[https://www.inria.fr/en/camus][Camus]] ([[https://www.inria.fr/en/][Inria]])
and [[https://icps.icube.unistra.fr/][ICPS]]
([[https://icube.unistra.fr/en][ICube]]) teams was automatic parallelization of
C source code by task insertion (see [[#research-post-doc][Automatic
parallelization through task insertion]]). My doctoral thesis at the University
of Bordeaux within the [[https://concace.gitlabpages.inria.fr/][Concace]] team
was focused on the development of methods for solving large coupled FEM/BEM
sparse/dense linear systems arising from aeroacoustic problems (see
[[#research-thesis][Solvers for coupled FEM/BEM linear systems]]). Finally, I
took my first steps towards computer science research during my two internships
within the Camus and the ICPS teams, focusing on a new programming structure,
called XFOR, and the associated software tools (see [[#research-xfor][XFOR
programming structure]]).

* Mixed precision computation in a distributed acousting sensing block
:PROPERTIES:
:CUSTOM_ID: research-post-doc-2
:END:

More details coming soon.

** Talks
:PROPERTIES:
:CUSTOM_ID: post-doc-2-talks
:END:

- *Thesis and since then: Solvers for coupled sparse/dense linear systems in*
  *aeroacoustics and automatic task-based parallelization of C source code*
  - [[https://www-pequan.lip6.fr/][PEQUAN team]] seminar @ LiP6 UMR 7606, Paris,
    France, Januray 2025
  - [[./images/pdf.png]]
    [[https://gitlab.lip6.fr/api/v4/projects/2205/jobs/artifacts/main/raw/slides.pdf?job=build][Slides]]

** Running tutorials
:PROPERTIES:
:CUSTOM_ID: post-doc-2-tutorials
:END:

- [[./images/fr.png]] *Guix et org mode, vers une étude scientifique*
  *expérimentale reproductible* (upcoming)
  - [[https://2025.compas-conference.fr/][ComPAS 2023]] conferece @ Bordeaux,
    France, June 2025
  - [[./images/html.png]] [[https://2025.compas-conference.fr/tutoriaux/][List
    of scheduled tutorials]]

* Automatic parallelization through task insertion
:PROPERTIES:
:CUSTOM_ID: research-post-doc
:END:

Today, multi-core processors can be found in most computers, from cell phones to
high-performance computing clusters. Nevertheless, designing and writing
parallel applications that make efficient use of these numerous computing
resources often remains the prerogative of experts with the technical knowledge
and time required to optimize their software. Numerous compilation studies have
addressed this issue and proposed different approaches to automatic
parallelization. These are traditionally oriented towards loop nest
parallelization, based on the polyhedral model.

We are interested in the task-based parallel programming. In this model, the
program is broken down into tasks comprising one or more instructions. Tasks are
associated with dependency constraints to enable an execution engine to schedule
and execute tasks in the right order, i.e. respecting any dependencies between
tasks accessing the same data in memory. In this way, tasks that are independent
of each other can be executed in parallel. The challenge in the automatization
of this approach is to find an efficient way of breaking down the initial
program into tasks.

In this context, APAC was developed. It is an automatic translator for rewriting
a sequential C/C++ program into a parallel task-based program using appropriate
directives from the OpenMP programming interface. During the post-doctorate, we
formalized APAC as a source-to-source compilation architecture built around an
intermediate representation called the task candidate graph. In the latter, each
vertex comprises one or more sequential source code instructions. Data
dependencies between instructions are represented by edges connecting the
corresponding vertices. Analyses and transformations on the graph enable us to
identify suitable candidates to become parallelizable tasks in the resulting
source code, and to introduce mechanisms to control the number of tasks and the
depth of parallelism at runtime. We have also equipped APAC with a module to
model the execution time of task candidates as a function of the value of the
arguments of the associated instructions. The aim is to refine the selection of
suitable candidates and condition task creation at runtime.

Based on [[https://github.com/charguer/optitrust][OptiTrust]] [cite:@OptiTrust],
a source code transformation framework, we implemented a prototype APAC capable
of translating a sequential program written in a subset of the C language into a
parallel program based on OpenMP tasks. During the post-doctorate, we
contributed to the development of OptiTrust and worked closely with the authors
and other contributors to the project, in particular
[[http://chargueraud.org/][Arthur Chargéraud]]
([[https://www.inria.fr/en/][Inria]]) and Thomas Koehler
([[https://www.inria.fr/en/][Inria]]).

A preliminary experimental study allowed us to validate the prototype and
demonstrate the effectiveness of the programs produced on a selection of source
codes. We then submitted a summary of our work to the
[[https://2025.compas-conference.fr/][ComPAS 2025]] conference. We are currently
working on finalizing an extended experimental study.

** Running tutorials
:PROPERTIES:
:CUSTOM_ID: post-doc-tutorials
:END:

- *Towards a reproducible research study*
  - [[https://2023.compas-conference.fr/][ComPAS 2023]] conferece @ Annecy,
    France, July 2023
  - [[./images/html.png]]
    [[https://tutoriel-guix-compas-2023.gitlabpages.inria.fr/tutorial/][Self-contained tutorial]]
- *How to use Org mode and Guix to build a reproducible experimental study*
  - [[https://hpc.guix.info/events/2023/workshop/][Workshop on Reproducible
    Software Environments for Research and High-Performance]] @ Montpellier,
    France, November 2023
  - [[./images/pdf.png]]
    [[https://tutorial-guix-hpc-workshop.gitlabpages.inria.fr/slides/slides.pdf][Slides]]

** Participation on program committees
:PROPERTIES:
:CUSTOM_ID: post-doc-committees
:END:

- *Artifact evaluation committee*
  - [[https://conf.researchr.org/home/cgo-2024][International Symposium on Code
    Generation and Optimization (CGO) 2024]] @ Edinburgh, United Kingdom, March
    2024
  - [[./images/html.png]]
    [[https://conf.researchr.org/committee/cgo-2024/cgo-2024-artifact-evaluation-artifact-evaluation-committee][Committee
    members]]
- *Peer-review*
  - [[https://www.worldscientific.com/worldscinet/PPL][Parallel Processing
    Letters (PPL)]] journal, January 2024
- *Reproducibility committee*
  - [[https://sc24.supercomputing.org][International Conference for High
    Performance Computing, Networking, Storage, and Analysis (SC) 2024]] @
    Atlanta, Georgia, United States, November 2024
  - [[./images/html.png]]
    [[https://sc24.supercomputing.org/planning-committee/][Committee members]]

* Solvers for coupled FEM/BEM linear systems
:PROPERTIES:
:CUSTOM_ID: research-thesis
:END:

In the aeronautical industry, aeroacoustics is used to model the propagation of
sound waves in the airflow enveloping an aircraft in flight. It is then possible
to simulate the noise produced by an aircraft at ground level during take-off
and landing, to ensure compliance with environmental standards and to enable the
design of future aircraft models. Unlike most other complex physics simulations,
the method consists in solving coupled linear sparse/dense systems. To produce a
realistic result, the number of unknowns in the system can be extremely large,
making its resolution a major challenge. My thesis [cite:@Thesis] focused on the
design and evaluation of algorithms for solving large linear systems of this
kind.

On the one hand, we proposed algorithms using the existing programming interface
(API) of fully-featured and well-optimized sparse and dense direct solvers such
as MUMPS [fn:mumps], HMAT [fn:hmat] and SPIDO [fn:spido]. Thanks to these
algorithms, we were able to bypass the major shortcomings of a basic usage of
these solvers and take full advantage of their advanced features such as
numerical compression, out-of-core computation and distributed memory
parallelism. In summary, compared with a state-of-the-art reference approach,
the proposed algorithms allow for processing up to 7× larger coupled FEM/BEM
systems on a single shared-memory multi-core machine, and more than 6.5× larger
coupled FEM/BEM systems in a distributed-memory environment.

In the research report [cite:@RR20], we began by formalizing and benchmarking
existing implementations at Airbus. Following the first new developments, I
presented a preliminary study of the proposed algorithms [cite:@Compas21] at
[[https://2021.compas-conference.fr/][ComPAS 2021]]. This national-level
peer-reviewed conference is ideally suited for PhD students seeking detailed
feedback on their preliminary work. The absence of conference proceedings is
voluntary and allows future submission of the work to an international journal
or conference, for example.

Indeed, we subsequently published our final study of all the proposed
shared-memory algorithms in [cite:@IPDPS22], which I presented at the
[[https://www.ipdps.org/ipdps2022/2022-.html][IPDPS 2022]] international
conference. This is one of the major events in the field, the reputation of
which is, and rightly so, well recognized by existing rankings, and in which it
is important to publish.

We also conducted a multi-metric study of the proposed algorithms, including
energy consumption, memory usage and number of floating-point operations
[cite:@SBACPAD22]. I presented this study at
[[https://project.inria.fr/sbac2022/][SBAC-PAD 2022]]. Firstly, the study
confirmed the interest in numerical compression and out-of-core computation.
Next, profiles of processor and memory power consumption, memory usage and the
number of floating-point operations gave us a better understanding of the
application's behavior. Finally, the study revealed a major bottleneck in our
implementation, as well as a potential load-balancing problem in the sparse
direct solver.

We then briefly presented our work in the short paper [cite:@Waves22] published
at the Waves 2022 conference [fn:waves].

Finally, the study of these algorithms carried out in a distributed memory
environment and presented in the thesis is the subject of a research report
[cite:@RR24].

The methods developed have been implemented and included in Airbus proprietary
software based on the MUMPS, SPIDO and HMAT solvers.

On the other hand, we evaluated an alternative solver API reyling on a coupling
of direct task-based solvers using the same runtime. A customized API allows us
to improve composability and to simplify data exchange between solvers for a
more efficient use of computational resources. While the introduction of such
substantial changes in fully-featured community-driven solvers can only be
considered in the long term due to the complexity of their source code (a few
hundred thousand lines of code), we were able to implement a proof of concept of
this approach in a reduced prototype. A preliminary comparative experimental
study validated our implementation, confirming that it can achieve the targeted
solution accuracy. In addition, we have illustrated the potential benefits of an
asynchronous task execution and shown that even a proof-of-concept of this
approach can compete with previously proposed methods as well as those in the
state of the art.

This work was the fruit of a collaboration with
[[https://www.irit.fr/~Alfredo.Buttari/][Alfredo Buttari]]
([[https://www.cnrs.fr/en][CNRS]], [[https://www.irit.fr/en/home/][IRIT]]). In
May 2022, I spent a week in Toulouse with the aim of working on the
incorporation of necessary changes in the sparse direct solver
[[https://qr\_mumps.gitlab.io/][qr_mumps]] we have used and which is developed
by Alfredo Buttari.

I had the opportunity to submit an abstract [cite:@Compas23] and present this
work at [[https://2023.compas-conference.fr/][ComPAS 2023]]. 

In addition to the main contribution, we devoted a significant effort to the
reproducibility of our work. To this end, we have explored the principles of
literate programming and associated software tools to ensure reproducibility of
experimental environments and the numerical experiments themselves running on
different machines and spanning over extended periods of time. The thesis itself
contains a chapter dedicated to this subject.

Moreover, the technical report [cite:@RT20] published as a companion to the
study [cite:@RR20] and describing its literate and reproducible environment
represents our first complete work implementing the reproducibility principles
studied. Subsequently, these community activity reports [cite:@Guix21;@Guix22]
document our ongoing efforts. In this context, I also contributed to the
GNU Guix package manager, helping to package new software and localize GNU Guix
and its documentation into Slovak.

[fn:mumps] sparse direct solver, [[https://mumps-solver.org/]]
[fn:hmat] dense direct solver, [[https://theses.hal.science/tel-01244260/]]
[fn:spido] proprietary dense direct solver developped internally at Airbus
[fn:waves] International Conference on Mathematical and Numerical Aspects of
Wave Propagation


** Publications
:PROPERTIES:
:CUSTOM_ID: thesis-publications
:END:

Author names always appear in alphabetical order.

#+BIBLIOGRAPHY: ./references.bib
#+PRINT_BIBLIOGRAPHY: :keyword "OrgMe" :notkeyword "Xfor"

** Talks
:PROPERTIES:
:CUSTOM_ID: thesis-talks
:END:

- *Solution of larger coupled sparse/dense linear systems in an industrial*
  *aeroacoustic context*
  - [[https://team.inria.fr/camus/][CAMUS team]] seminar @ ICube UMR 7357,
    Illkirch-Graffenstaden, France, June 2022
  - [[./images/pdf.png]]
    [[https://thesis-mfelsoci.gitlabpages.inria.fr/slides/camus/camus.pdf][Slides]]
- *Direct solution of larger coupled sparse/dense FEM/BEM linear systems using*
  *low-rank compression*
  - [[https://sparsedays.cerfacs.fr/][Sparse Days 2022]] @ St-Girons, France,
    June 2022
  - [[./images/pdf.png]]
    [[https://thesis-mfelsoci.gitlabpages.inria.fr/slides/sparse-days/sparse-days.pdf][Slides]]
- *Reconciling high-performance computing with the use of third-party*
  *libraries?*
  - with E. Agullo
  - [[https://team.inria.fr/datamove/][Datamove team]] seminar, held virtually,
    May 2022
  - [[./images/pdf.png]]
    [[https://thesis-mfelsoci.gitlabpages.inria.fr/slides/datamove/datamove.pdf][Slides]]
- *An energy consumption study of coupled solvers for FEM/BEM linear systems:*
  *preliminary results*
  - [[https://www.irit.fr/solharis/solharis-plenary-meeting-09-10-02-2022/][SOLHARIS
    plenary meeting]] @ Inria Bordeaux Sud-Ouest, Bordeaux, France, February
    2022
  - [[./images/pdf.png]]
    [[https://www.irit.fr/solharis/wp-content/uploads/2022/02/022022_marek_felsoci.pdf][Slides]]
- *Towards memory-aware multi-solve two-stage solver for coupled FEM/BEM*
  *systems*
  - [[https://www.irit.fr/solharis/solharis-plenary-meeting-02-07-2021/][SOLHARIS
    plenary meeting]], held virtually, July 2021
  - [[./images/pdf.png]]
    [[https://www.irit.fr/solharis/wp-content/uploads/2021/07/072021_felsoci.pdf][Slides]]
- *Coupled solvers for high-frequency aeroacoustics*
  - Doctoral school days, held virtually, May 2021
  - [[./images/pdf.png]]
    [[https://thesis-mfelsoci.gitlabpages.inria.fr/thesis/slides/poster-edmi-days.pdf][Poster]]
- [[./images/fr.png]] *Guix et Org mode, deux amis du doctorant sur le chemin*
  *vers une thèse reproductible*
  - [[https://hpc.guix.info/events/2021/atelier-reproductibilit%C3%A9-environnements/][Atelier
    reproductibilité des environnements logiciels]], held virtually, May 2021
  - [[./images/pdf.png]]
    [[https://hpc.guix.info/static/doc/atelier-reproductibilit%C3%A9-2021/marek-fel%C5%A1%C3%B6ci-org-guix.pdf][Slides]]
  - [[./images/video.png]]
    [[https://hpc.guix.info/static/videos/atelier-reproductibilit%C3%A9-2021/marek-fel%C5%A1%C3%B6ci.webm][Video
    recording]]
- *Coupled solvers for FEM/BEM linear systems arising from discretization of*
  *aeroacoustic problems*
  - [[https://team.inria.fr/hiepacs/][HiePACS team]] work group, held virtually,
    April 2021
  - [[./images/pdf.png]]
    [[https://thesis-mfelsoci.gitlabpages.inria.fr/thesis/slides/wg-04-2021.pdf][Slides]]
- *A preliminary comparative study of solvers for coupled FEM/BEM linear*
  *systems in a reproducible environment*
  - [[https://www.irit.fr/solharis/solharis-plenary-meeting-07-08-12-2020/][SOLHARIS
    plenary meeting]], held virtually, December 2020
  - [[./images/pdf.png]]
    [[https://www.irit.fr/solharis/wp-content/uploads/2020/12/122020-Felsoci.pdf][Slides]]

** Running tutorials
:PROPERTIES:
:CUSTOM_ID: thesis-tutorials
:END:

- *Guix and Org mode, a powerful association for building a reproducible*
  *research study*
  - Seminar and hands-on session @ Inria Grand-Est, Nancy, France, June 2022
  - [[./images/pdf.png]]
    [[https://tuto-techno-guix-hpc.gitlabpages.inria.fr/slides/tuto-techno-guix-hpc.pdf][Slides]]
  - [[./images/html.png]]
    [[https://tuto-techno-guix-hpc.gitlabpages.inria.fr/guidelines/][Hands-on
    session]]

* XFOR programming structure
:PROPERTIES:
:CUSTOM_ID: research-xfor
:END:

The work I carried out within my Master's thesis [cite:@MastersThesis] was
related to the field of program optimization, and in particular for-loops, using
the polyhedral model. More specifically, I worked on the XFOR programming
structure [cite:@XFOR]. Its syntax is very similar to that of standard for-loops
in the C language. However, it allows several for-loops to be grouped together
and managed at the same time. Thanks to its two specific parameters, /grain/ and
/offset/, the programmer can change the way these loops are executed in a
simpler, more intuitive way.

The goal is to adjust the order of execution of instructions within managed
loops, so as to highlight the possibilities offered by modern computer
architectures. The idea is to optimize the use of cache memory and to exploit
the parallelization capabilities of processors. A program rewritten using XFOR
can be up to 6× faster compared to its original version.

One of the main tools dedicated to this structure is the "Iterate, But Better!"
(IBB) compiler, which translates XFOR loops into equivalent for-loops. This way,
the translated program can be compiled by any C compiler. The need to compile an
XFOR program twice was one of the reasons for integrating the XFOR structure
into a production compiler such as Clang/LLVM. This would allow direct
compilation of XFOR programs and could help to promote the structure within the
programming community.

As part of my internship, I extended the lexical and syntax analyzers of the
Clang/LLVM compiler, so that it could recognize and correctly translate XFOR
loops. I also implemented the transformation of XFOR loops into the intermediate
representation used by the compiler (aka. LLVM IR) to produce executable files.
By the end of the internship, the extended
[[https://gitlab.inria.fr/xfor/xfor-clang][Clang/LLVM]] was able to compile
programs with both simple and nested XFOR loops.

To make XFOR programs even more powerful, I then focused on strategies for
parallelizing XFOR loops using threads in order to allow for exploring of a more
coarse-grained parallelism. In particular, I studied the use of the OpenMP
parallelization library in XFOR programs.

** Publications
:PROPERTIES:
:CUSTOM_ID: xfor-publications
:END:

#+PRINT_BIBLIOGRAPHY: :keyword "OrgMe" :keyword "Xfor"

** Talks
:PROPERTIES:
:CUSTOM_ID: xfor-talks
:END:

- *XFOR loops, integration into the Clang/LLVM compiler and extenstion to*
  *parallel programming*
  - Software corner @ ICube UMR 7357, Illkirch-Graffenstaden, France, June 2019
  - [[./images/pdf.png]] [[/others/software-corner.pdf][Slides]]
- *On the XFOR programming structure*
  - Introduction to research for Bachelor's degree students @ Faculty of
    Computer science, University of Strasbourg, France, April 2019

* References
:PROPERTIES:
:CUSTOM_ID: references
:END:

#+PRINT_BIBLIOGRAPHY: :notkeyword "OrgMe"
